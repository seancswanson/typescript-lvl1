{"version":3,"sources":["index.ts"],"names":["console","log","isOpen","myName","myAge","myList","me","Job","job","WebDev","phone","tablet","sayWord","word","otherStuff","_i","arguments","length","newName","newNameTwo","makeMargin","x","cat","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,QAAQC,GAAR,CAAY,cAAZ;AACA,IAAIC,SAAS,KAAb;AACA,IAAIC,SAAS,MAAb;AACA,IAAIC,QAAQ,EAAZ;AACA,IAAIC,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb;AACA,IAAIC,KAAK,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,CAAT;AACA,IAAIC,GAAJ;AACA,CAAC,UAAUA,GAAV,EAAe;AACZA,QAAIA,IAAI,QAAJ,IAAgB,CAApB,IAAyB,QAAzB;AACAA,QAAIA,IAAI,aAAJ,IAAqB,CAAzB,IAA8B,aAA9B;AACAA,QAAIA,IAAI,IAAJ,IAAY,CAAhB,IAAqB,IAArB;AACH,CAJD,EAIGA,QAAQA,MAAM,EAAd,CAJH;AAKA,IAAIC,MAAMD,IAAIE,MAAd;AACA,IAAIC,QAAQ,WAAZ;AACA,IAAIC,SAAS,CAAb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,SAAVA,OAAU,CAAUC,IAAV,EAAgB;AAC1B,QAAIA,SAAS,KAAK,CAAlB,EAAqB;AAAEA,eAAO,OAAP;AAAiB;AACxC,QAAIC,aAAa,EAAjB;AACA,SAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKC,UAAUC,MAAhC,EAAwCF,IAAxC,EAA8C;AAC1CD,mBAAWC,KAAK,CAAhB,IAAqBC,UAAUD,EAAV,CAArB;AACH;AACDf,YAAQC,GAAR,CAAYa,UAAZ;AACA,WAAOD,IAAP;AACH,CARD;AASAD,QAAQ,MAAR,EAAgB,KAAhB;AACA;AACA;AACA,IAAIM,UAAU,WAAd;AACAA,UAAU,aAAV;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAaD,OAAjB;AACA;AACA;AACA,IAAIE,aAAa,SAAbA,UAAa,CAAUC,CAAV,EAAa;AAC1B,WAAO,aAAaA,CAAb,GAAiB,IAAxB;AACH,CAFD;AAGAD,WAAW,EAAX;AACAA,WAAW,IAAX;AACAA,WAAW,KAAX;AACA;AACA,IAAIE,MAAM,OAAV;AACAA,MAAM,IAAN;AACAA,MAAM,OAAN;AACAA,MAAMC,SAAN;AACAD,MAAM,EAAN;AACAA,MAAM,KAAN","file":"typescript.fcfa5a15.map","sourceRoot":"..","sourcesContent":["console.log('Hello world!');\nvar isOpen = false;\nvar myName = 'Sean';\nvar myAge = 25;\nvar myList = [0, 1, 2];\nvar me = ['Sean', 25, true];\nvar Job;\n(function (Job) {\n    Job[Job[\"WebDev\"] = 0] = \"WebDev\";\n    Job[Job[\"WebDesigner\"] = 1] = \"WebDesigner\";\n    Job[Job[\"PM\"] = 2] = \"PM\";\n})(Job || (Job = {}));\nvar job = Job.WebDev;\nvar phone = 'iPhone 7+';\nvar tablet = 2;\n// Functions in TypeScript\n// ? for optional params\n// const sayWord = (word?: string): string => {\n//   console.log(word || 'hello');\n//   return word || 'hello';\n// };\n// String or 'Hello'\nvar sayWord = function (word) {\n    if (word === void 0) { word = 'Hello'; }\n    var otherStuff = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        otherStuff[_i - 1] = arguments[_i];\n    }\n    console.log(otherStuff);\n    return word;\n};\nsayWord('Sean', 'Wes');\n// Implicit types:\n// Typescript infers type.\nvar newName = 'Sean Swan';\nnewName = 'Cinder Momo';\n// newName = 2;\n// newName = false;\n// console.log(newName);\n// Gets implicit type from the variables first declaration.\n// Getting value from latest newName\nvar newNameTwo = newName;\n// newNameTwo = 10;\n// Union types with | split between multiple types\nvar makeMargin = function (x) {\n    return \"margin: \" + x + \"px\";\n};\nmakeMargin(10);\nmakeMargin('10');\nmakeMargin(false);\n// Null types\nvar cat = 'Snowy';\ncat = null;\ncat = 'Snowy';\ncat = undefined;\ncat = 12;\ncat = false;\n"]}